# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v3.0. To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" and USB communication.

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.

[include KAMP_Settings.cfg]
[include start_print.cfg]
[include park_macros.cfg]
[include menu_changes.cfg]

[exclude_object]

# Macros
[pause_resume]

[virtual_sdcard]
path: ~/printer_data/gcodes

[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}        ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}  ; Duration/wait of each beep in ms. Default 100ms.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=1
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
		G4 P{dur}
    {% endfor %}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[delayed_gcode DISABLEFILAMENTSENSOR]   
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro PRINT_END]
description: End print sequence
gcode:
  # Turn off bed, extruder, and fan
  M140 S0
  M104 S0
  M106 S0
  # Move nozzle away from print while retracting
  G91
  G1 X-2 Y-2 E-3 F300
  # Raise nozzle by 10mm
  G1 Z10 F3000
  G90
  # Show print
  G0 Y220 F4000
  # Disable filament runout sensor
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  # Disable steppers
  M84

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

[gcode_macro M0]
gcode:
  PAUSE

[gcode_macro M600]
gcode:
  UNLOAD_FILAMENT

[gcode_macro FILAMENT_RUNOUT_PAUSE]
gcode:
  M117 Runout Triggered
  PAUSE

[gcode_macro UNLOAD_PLA]
gcode:
  # Turn fan on
  M106 S255
  # Set extruder temp and wait
  M109 S210
  # Unload by 80mm
  G1 E20 F600
  G1 E-80 F600
  # Set status on LCD
  M117 Unload Finished

[gcode_macro HOME_UNLOAD_PLA]
gcode:
  # Home
  G28
  # Absolute positioning
  G90
  # Move Z up and Y back
  G0 Z120 F1500
  G0 Y0 F4000
  # Turn fan on
  M106 S255
  # Set extruder temp and wait
  M109 S210
  # Unload the filament by 80mm
  G1 E20 F600
  G1 E-80 F600
  # Set status on LCD
  M117 Unload Finished

[gcode_macro LOAD_PLA]
gcode:
  # Set extruder temp and wait
  M109 S210
  # Load by 80mm
  G1 E80 F500
  # Set status on LCD
  M117 Load Finished

[gcode_macro UNLOAD_PETG]
gcode:
  # Turn fan on
  M106 S200
  # Set extruder temp and wait
  M109 S245
  # Unload by 80mm
  G1 E20 F600
  G1 E-80 F600
  # Set status on LCD
  M117 Unload Finished

[gcode_macro HOME_UNLOAD_PETG]
gcode:
  # Home
  G28
  # Absolute positioning
  G90
  # Move Z up and Y back
  G0 Z120 F1500
  G0 Y0 F4000
  # Turn fan on
  M106 S200
  # Set extruder temp and wait
  M109 S245
  # Unload the filament by 80mm
  G1 E20 F600
  G1 E-80 F600
  # Set status on LCD
  M117 Unload Finished

[gcode_macro LOAD_PETG]
gcode:
  # Set extruder temp and wait
  M109 S245
  # Load by 80mm
  G1 E80 F500
  # Set status on LCD
  M117 Load Finished

[gcode_macro COOLDOWN_HOTEND]
gcode:
  # Cooldown hotend
  M104 S0
  # Turn part cooling fan off
  M106 S0

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC0
position_endstop: 1 # position_endstop is not needed because this is positive
position_max: 243 # changed
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.580
stealthchop_threshold: 999999

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC1
position_endstop: -7
position_max: 234 # changed
position_min: -7 # calibrated
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.580
stealthchop_threshold: 999999

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop # used to be ^PC2
#position_endstop: 0.0
position_max: 250
position_min: -4.0

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.580
stealthchop_threshold: 999999

[extruder]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD1
microsteps: 16
rotation_distance: 33.2033
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
control: pid
# tuned for Micro Swiss All-Metal Hotend with 240 degree Celsius target - custom tuned
pid_kp:28.361
pid_ki: 1.735
pid_kd: 115.927
min_temp: 0
max_temp: 260
min_extrude_temp: 180
max_extrude_only_distance: 250.0
pressure_advance: 0.4
max_extrude_cross_section: 5

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.650
stealthchop_threshold: 999999

[heater_bed]
heater_pin: PC9
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC4
control: pid
# tuned for stock hardware with 70 degree Celsius target - custom tuned
pid_Kp: 71.804
pid_Ki: 1.337
pid_Kd: 963.962
min_temp: 0
max_temp: 130

# Heatbreak fan
[heater_fan heatbreak_cooling_fan]
pin: PC7

# Controller fan
[controller_fan motherboard_fan]
pin: PB15

#[controller_fan melzi_motherboard_fan]
#pin: melzi:PB4

# Part cooling fan
[fan]
pin: PC6

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2C001E0008504B5735313920-if00

#[mcu melzi]
#serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0

[printer]
kinematics: cartesian
max_velocity: 400
max_accel: 4000
max_z_velocity: 5
max_z_accel: 100
square_corner_velocity: 5.0

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

# See the sample-lcd.cfg file for definitions of common LCD displays.

[display]
lcd_type: st7920
cs_pin: PB8
sclk_pin: PB9
sid_pin: PD6
encoder_pins: ^PA10, ^PA9
click_pin: ^!PA15

[output_pin beeper]
pin: PB5
value: 0
shutdown_value: 0

[bltouch]
sensor_pin: ^PC14 # this is unique to your mainboard
control_pin: PA1  # this is unique to your mainboard
x_offset: -48.3 # calibrated
y_offset: -5 # calibrated
samples: 2
speed: 2
z_offset: 2.885
probe_with_touch_mode: true

[safe_z_home]
home_xy_position: 117,117 # this should be the center of your bed
speed: 50 
z_hop: 10
z_hop_speed: 5

[bed_mesh]
speed: 80
horizontal_move_z: 5
mesh_min: 7.7, 7       # !!min and max co-ords are based on the probes location not the nozzle!! - calibrated
mesh_max: 192, 221  # needs to be calibrated for your individual printer - calibrated
probe_count: 5,5 # this is the number of probing points on X then Y axis
mesh_pps: 2,2
fade_start: 1
fade_end: 10
fade_target: 0
algorithm: bicubic

[filament_switch_sensor filament_sensor]
pause_on_runout: False
runout_gcode: FILAMENT_RUNOUT_PAUSE
insert_gcode: RESUME
switch_pin: !PC15

[firmware_retraction]
retract_length: 3
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
retract_speed: 45
#   The speed of retraction, in mm/s. The default is 20 mm/s.
unretract_extra_length: 0
#   The length (in mm) of *additional* filament to add when
#   unretracting.
unretract_speed: 45
#   The speed of unretraction, in mm/s. The default is 10 mm/s.

[respond]
default_type: echo

[input_shaper]
shaper_freq_x: 40.51 # 38.80
shaper_freq_y: 45.76
shaper_type: mzv

[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_macro copy_bin_to_config_folder]
gcode:
    RUN_SHELL_COMMAND CMD=copy_bin

[gcode_shell_command copy_bin]
command: bash -c "cp $HOME/klipper/out/klipper.bin $HOME/printer_data/config"
timeout: 20.0
verbose: True

[gcode_shell_command shutdown_printer]
command: bash -c "sudo shutdown now"
timeout: 40.0
verbose: True

[gcode_shell_command reboot_printer]
command: bash -c "sudo reboot"
timeout: 40.0
verbose: True